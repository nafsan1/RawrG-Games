// Generated by Dagger (https://dagger.dev).
package com.example.core.di;

import com.example.core.repository.GamesRepository;
import com.example.core.use_case.GamesUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideTrackerUseCasesFactory implements Factory<GamesUseCase> {
  private final Provider<GamesRepository> repositoryProvider;

  public UseCaseModule_ProvideTrackerUseCasesFactory(Provider<GamesRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GamesUseCase get() {
    return provideTrackerUseCases(repositoryProvider.get());
  }

  public static UseCaseModule_ProvideTrackerUseCasesFactory create(
      Provider<GamesRepository> repositoryProvider) {
    return new UseCaseModule_ProvideTrackerUseCasesFactory(repositoryProvider);
  }

  public static GamesUseCase provideTrackerUseCases(GamesRepository repository) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.provideTrackerUseCases(repository));
  }
}
