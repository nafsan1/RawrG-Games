// Generated by Dagger (https://dagger.dev).
package com.example.core.di;

import com.example.core.local.GamesDatabase;
import com.example.core.network.service.ApiServices;
import com.example.core.repository.GamesRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GamesModule_ProvideMoviesRepositoryFactory implements Factory<GamesRepository> {
  private final Provider<ApiServices> apiProvider;

  private final Provider<GamesDatabase> dbProvider;

  public GamesModule_ProvideMoviesRepositoryFactory(Provider<ApiServices> apiProvider,
      Provider<GamesDatabase> dbProvider) {
    this.apiProvider = apiProvider;
    this.dbProvider = dbProvider;
  }

  @Override
  public GamesRepository get() {
    return provideMoviesRepository(apiProvider.get(), dbProvider.get());
  }

  public static GamesModule_ProvideMoviesRepositoryFactory create(Provider<ApiServices> apiProvider,
      Provider<GamesDatabase> dbProvider) {
    return new GamesModule_ProvideMoviesRepositoryFactory(apiProvider, dbProvider);
  }

  public static GamesRepository provideMoviesRepository(ApiServices api, GamesDatabase db) {
    return Preconditions.checkNotNullFromProvides(GamesModule.INSTANCE.provideMoviesRepository(api, db));
  }
}
